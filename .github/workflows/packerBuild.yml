name: build_pkr_image

on:
  pull_request:
    branches:
      - main
#    types:
#      - closed

jobs:
  packer_dependencies:
    name: build_pkr_image
#    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      DB: ${{ secrets.DB }}
      HOST: ${{ secrets.HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      TOPIC_NAME: ${{ secrets.TOPIC_NAME }}
      ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
      METADATA_GCP: ${{ secrets.METADATA_GCP }}
      KEY_NAME: ${{ secrets.KEY_NAME }}

    steps:
      - name: Install Maven
        run: |
          sudo touch /var/log/webapp.log
          sudo chmod o+rw /var/log/webapp.log
          sudo apt-get update
          sudo apt-get install -y maven

      - name: Install postgresql
        run: |
          sudo apt install -y postgresql postgresql-contrib

      - name: Install packer
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install packer

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Run postgresql server
        run: |
          sudo service postgresql start

      - name: Set up database and create user for application
        run: |
          sudo -u postgres psql -c "CREATE DATABASE ${DB};"
          sudo -u postgres psql -c "CREATE USER ${DB_USER} with password '${DB_PASSWORD}';"
          sudo -u postgres psql -c "ALTER USER ${DB_USER} WITH SUPERUSER;"

      - name: Status of postgres
        run: |
          pg_isready

      - name: Run Integration and unit Tests
        run: |
          mvn clean verify

      - name: Initialize packer
        run: |
          packer init ./packer/.

      - name: Format packer
        run: |
          packer fmt ./packer/.

      - name: Transfer env file
        run: |
          touch .env
          echo "DB_USER=${DB_USER}" >> .env
          echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
          cat .env

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.DEV_GCP_CREDENTIALS }}

      - name: Validate packer
        run: |
          packer validate -var 'project_id=dev-gcp-project-1' -var 'source_jar=./target/web-app-0.0.1-SNAPSHOT.jar' -var 'source_systemd=./systemd/webapp.service' -var 'source_opsconfig=./opsagent/config.yaml' ./packer/.

#      - name: Build packer
#        run: |
#          packer build -var 'project_id=dev-gcp-project-1' -var 'source_jar=./target/web-app-0.0.1-SNAPSHOT.jar' -var 'source_systemd=./systemd/webapp.service' -var 'source_opsconfig=./opsagent/config.yaml' ./packer/.

      - name: template creation and instance manager update
        run: |
          output=$(gcloud compute images list --filter="name~^packer-centos8-" --sort-by=~creationTimestamp --limit=1)
          image_name=$(echo "$output" | awk 'NR>1 {print $1}')
          random_string=$(LC_ALL=C tr -dc 'a-z0-9' < /dev/urandom | head -c 6)
          template_name="webapp-instance-template-$random_string"
          gcloud compute instance-templates create "$template_name" --project=dev-gcp-project-1 --machine-type=e2-medium --network-interface=network-tier=PREMIUM,subnet=webapp --metadata=startup-script="${METADATA_GCP}" --maintenance-policy=MIGRATE --provisioning-model=STANDARD --service-account=webapp-service-account@dev-gcp-project-1.iam.gserviceaccount.com --scopes=https://www.googleapis.com/auth/pubsub,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write --region=us-east1 --create-disk=auto-delete=yes,boot=yes,device-name=persistent-disk-0,image="$image_name",kms-key="${KEY_NAME}",mode=rw,size=100,type=pd-standard --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any
          gcloud compute instance-groups managed rolling-action start-update webapp-manager --project=dev-gcp-project-1 --type='proactive' --max-surge=3 --max-unavailable=3 --minimal-action='replace' --most-disruptive-allowed-action='replace' --replacement-method='substitute' --version=template="$template_name" --region=us-east1

      - name: Wait until instance group refresh completes
        run: |
          while true; do
              manager_status=$(gcloud compute instance-groups managed describe webapp-manager --region=us-east1 --format="json")
              echo "$manager_status"
              version_target=$(echo "$manager_status" | grep -o '"isReached": *[a-z]*' | awk -F": " '{print $2}' | tr -d '"')
              echo "$version_target"
              if [ "$version_target" == "true" ]; then
                  echo "Version target is reached."
                  exit 0
              else
                  echo "Still checking...."
                  sleep 30
              fi
          done